export const kwTags = {
  PRICE_SOURCE: 'price',
  VALUE_SOURCE: 'value',

  TSM_CORE: 'core',
  TSM_ACCOUNTING: 'accounting',
  TSM_CRAFTING: 'crafting',
  TSM_OPERATIONS: 'operations',
  TSM_AUCTION: 'auction',
  TSM_AUCTION_REALM: 'realm',
  TSM_AUCTION_REGION: 'region',
  TSM_SOURCE_INTERNAL: 'internal',
  TSM_SOURCE_EXTERNAL: 'external',
};

class TSMFunction {
  constructor(name, args, definition) {
    this.name = name;
    this.args = args;
    this.definition = definition;
  }

  getCompletion() {
    return `${this.name}(`;
  }
}

class TSMKeyword {
  constructor(name, definition, tags) {
    this.name = name;
    this.definition = definition;
    this.tags = tags;
  }

  getCompletion() {
    return this.name;
  }
}

export const symbols = [
  // Price sources
  // Accounting
  new TSMKeyword(
    'AvgBuy',
    'Returns the average buy price for all purchases for a particular item',
    [kwTags.PRICE_SOURCE, kwTags.TSM_ACCOUNTING],
  ),
  new TSMKeyword(
    'AvgSell',
    'Returns the average sell price for all sales for a particular item',
    [kwTags.PRICE_SOURCE, kwTags.TSM_ACCOUNTING],
  ),
  new TSMKeyword(
    'MaxBuy',
    'Returns the maximum price you\'ve purchased an item for in your accounting data',
    [kwTags.PRICE_SOURCE, kwTags.TSM_ACCOUNTING],
  ),
  new TSMKeyword(
    'MaxSell',
    'Returns the maximum price you\'ve sold an item for in your accounting data',
    [kwTags.PRICE_SOURCE, kwTags.TSM_ACCOUNTING],
  ),
  new TSMKeyword(
    'MinBuy',
    'Returns the minimum price you\'ve purchased an item for in your accounting data',
    [kwTags.PRICE_SOURCE, kwTags.TSM_ACCOUNTING],
  ),
  new TSMKeyword(
    'MinSell',
    'Returns the minimum price you\'ve sold an item for in your accounting data',
    [kwTags.PRICE_SOURCE, kwTags.TSM_ACCOUNTING],
  ),
  new TSMKeyword(
    'SmartAvgBuy',
    'Returns the average purchase price across your last purchases of the item',
    [kwTags.PRICE_SOURCE, kwTags.TSM_ACCOUNTING],
  ),

  // Crafting
  new TSMKeyword(
    'Crafting',
    'Returns the sum of the material prices of each individual item used to craft the recipe',
    [kwTags.PRICE_SOURCE, kwTags.TSM_CRAFTING],
  ),
  new TSMKeyword(
    'MatPrice',
    'Returns the material price of a item',
    [kwTags.PRICE_SOURCE, kwTags.TSM_CRAFTING],
  ),

  // Core
  new TSMKeyword(
    'Destroy',
    'Returns the average value of the items you would receive by destroying it',
    [kwTags.PRICE_SOURCE, kwTags.TSM_CORE],
  ),
  new TSMKeyword(
    'VendorBuy',
    'Returns the cost of a particular item you can purchase from a vendor',
    [kwTags.PRICE_SOURCE, kwTags.TSM_CORE],
  ),
  new TSMKeyword(
    'VendorSell',
    'Returns the value of a particular item when you sell it to a vendor',
    [kwTags.PRICE_SOURCE, kwTags.TSM_CORE],
  ),

  // Operations
  new TSMKeyword(
    'AuctioningOpMax',
    'Returns the maximum price generated by the operations applied to your groups',
    [kwTags.PRICE_SOURCE, kwTags.TSM_OPERATIONS],
  ),
  new TSMKeyword(
    'AuctioningOpMin',
    'Returns the minimum price generated by the operations applied to your groups',
    [kwTags.PRICE_SOURCE, kwTags.TSM_OPERATIONS],
  ),
  new TSMKeyword(
    'ShoppingOpMax',
    'Returns the maximum shopping price from the shopping operation applied to your groups',
    [kwTags.PRICE_SOURCE, kwTags.TSM_OPERATIONS],
  ),
  new TSMKeyword(
    'SniperOpMax',
    'Returns the maximum sniper price from the sniper operation applied to your groups',
    [kwTags.PRICE_SOURCE, kwTags.TSM_OPERATIONS],
  ),
  new TSMKeyword(
    'AuctioningOpNormal',
    'Returns the normal price generated by the operations applied to your groups',
    [kwTags.PRICE_SOURCE, kwTags.TSM_OPERATIONS],
  ),

  // Auctions - Realm
  new TSMKeyword(
    'DBHistorical',
    'Returns the 60-day average of the DBMarket value for a particular item on your realm\'s Auction House',
    [kwTags.PRICE_SOURCE, kwTags.TSM_AUCTION, kwTags.TSM_AUCTION_REALM],
  ),
  new TSMKeyword(
    'DBMarket',
    'Returns the weighted 14-day average of the auctions listed for a particular item on your realm\'s Auction House',
    [kwTags.PRICE_SOURCE, kwTags.TSM_AUCTION, kwTags.TSM_AUCTION_REALM],
  ),
  new TSMKeyword(
    'DBMinBuyout',
    'Returns the lowest priced auction on your realm\'s Auction House',
    [kwTags.PRICE_SOURCE, kwTags.TSM_AUCTION, kwTags.TSM_AUCTION_REALM],
  ),

  // Auctions - Region
  new TSMKeyword(
    'DBRegionHistorical',
    'Returns the 60-day average of DBRegionMarketAvg for a particular item in your region',
    [kwTags.PRICE_SOURCE, kwTags.TSM_AUCTION, kwTags.TSM_AUCTION_REGION],
  ),
  new TSMKeyword(
    'DBRegionMarketAvg',
    'Returns the average of DBMarket across all the realms in your region for a particular item',
    [kwTags.PRICE_SOURCE, kwTags.TSM_AUCTION, kwTags.TSM_AUCTION_REGION],
  ),
  new TSMKeyword(
    'DBRegionMinBuyoutAvg',
    'Returns the average of DBMinBuyout across all the realms in your region for a particular item',
    [kwTags.PRICE_SOURCE, kwTags.TSM_AUCTION, kwTags.TSM_AUCTION_REGION],
  ),
  new TSMKeyword(
    'DBRegionSaleAvg',
    'Returns the average sale and purchase price for a particular item in your region',
    [kwTags.PRICE_SOURCE, kwTags.TSM_AUCTION, kwTags.TSM_AUCTION_REGION],
  ),

  // Value Sources
  // TSM Accounting
  new TSMKeyword(
    'NumExpires',
    'Returns an integer for the number of times an item has expired from the Auction House since the last time it was sold',
    [kwTags.VALUE_SOURCE, kwTags.TSM_ACCOUNTING, kwTags.TSM_SOURCE_INTERNAL],
  ),
  new TSMKeyword(
    'SaleRate',
    'Returns a decimal number that shows your personal sale rate for a particular item',
    [kwTags.VALUE_SOURCE, kwTags.TSM_ACCOUNTING, kwTags.TSM_SOURCE_INTERNAL],
  ),

  // Core
  new TSMKeyword(
    'ItemLevel',
    'Returns an integer for the item\'s level',
    [kwTags.VALUE_SOURCE, kwTags.TSM_CORE, kwTags.TSM_SOURCE_EXTERNAL],
  ),
  new TSMKeyword(
    'ItemQuality',
    'Returns an integer for the item\'s quality',
    [kwTags.VALUE_SOURCE, kwTags.TSM_CORE, kwTags.TSM_SOURCE_EXTERNAL],
  ),
  new TSMKeyword(
    'NumInventory',
    'Returns an integer indicating the number of an item you currently possess',
    [kwTags.VALUE_SOURCE, kwTags.TSM_CORE, kwTags.TSM_SOURCE_EXTERNAL],
  ),
  new TSMKeyword(
    'RequiredLevel',
    'Returns an integer for the item\'s required level',
    [kwTags.VALUE_SOURCE, kwTags.TSM_CORE, kwTags.TSM_SOURCE_EXTERNAL],
  ),

  // Auctions - Region
  new TSMKeyword(
    'DBRegionSaleRate',
    'Returns a decimal number that indicates the sale rate of a particular item averaged across all Auction Houses in your region',
    [
      kwTags.VALUE_SOURCE,
      kwTags.TSM_ACCOUNTING,
      kwTags.TSM_SOURCE_EXTERNAL,
      kwTags.TSM_AUCTION_REGION,
    ],
  ),
  new TSMKeyword(
    'DBRegionSoldPerDay',
    'Returns a decimal number indicating the volume of an item that is sold on average per Auction House per day in your region',
    [
      kwTags.VALUE_SOURCE,
      kwTags.TSM_ACCOUNTING,
      kwTags.TSM_SOURCE_EXTERNAL,
      kwTags.TSM_AUCTION_REGION,
    ],
  ),
];

export const functions = [
  new TSMFunction(
    'min',
    ['n..'],
    'Returns the numerical minimum of the prices in the list',
  ),
  new TSMFunction(
    'max',
    ['n..'],
    'Returns the numerical maximum of the prices in the list',
  ),
  new TSMFunction(
    'first',
    ['n..'],
    'Returns the first valid price in the list',
  ),
  new TSMFunction(
    'avg',
    ['n..'],
    'Returns the average of the prices in the list',
  ),
  new TSMFunction(
    'check',
    ['n', 'b', 'c'],
    'If the first parameter is greater than `0` return the second parameter, otherwise return the third parameter',
  ),
  new TSMFunction(
    'convert',
    ['variable'],
    'Returns the lowest cost conversion of the item being evaluated',
  ),
  new TSMFunction(
    'ifgt',
    ['a', 'b', 'x', 'y'],
    'Returns x if a is greater than b, otherwise it returns y',
  ),
  new TSMFunction(
    'ifgte',
    ['a', 'b', 'x', 'y'],
    'Returns x if a is greater than or equal to b, otherwise it returns y',
  ),
  new TSMFunction(
    'iflt',
    ['a', 'b', 'x', 'y'],
    'Returns x if a is less than b, otherwise it returns y',
  ),
  new TSMFunction(
    'iflte',
    ['a', 'b', 'x', 'y'],
    'Returns x if a is less than or equal to b, otherwise it returns y',
  ),
  new TSMFunction(
    'ifeq',
    ['a', 'b', 'x', 'y'],
    'Returns x if a is equal to b, otherwise it returns y',
  ),
  new TSMFunction(
    'round',
    ['x', 'y'],
    'Rounds x to the nearest multiple of y',
  ),
  new TSMFunction(
    'roundup',
    ['x', 'y'],
    'Rounds x up to the nearest multiple of y',
  ),
  new TSMFunction(
    'rounddown',
    ['x', 'y'],
    'Rounds x down to the nearest multiple of y',
  ),
];

export const specialFeatures = [
  new TSMKeyword('[Item Link]', 'Reference an item by link'),
  new TSMKeyword('i:ID', 'Reference an item by ID'),
];

export function findMatches(search) {
  const regex = new RegExp(
    search.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'),
    'ig',
  );

  return {
    functions: functions.filter(f => regex.test(f.name)),
    symbols: symbols.filter(k => regex.test(k.name)),
  };
}
