class TSMFunction {
  constructor(name, args, definition) {
    this.name = name;
    this.args = args;
    this.definition = definition;
  }

  getCompletion() {
    return `${this.name}(`;
  }
}

class TSMKeyword {
  constructor(name, definition) {
    this.name = name;
    this.definition = definition;
  }

  getCompletion() {
    return this.name;
  }
}

export const symbols = [
  new TSMKeyword('SmartAvgBuy', 'Returns the average purchase price across your last purchases of the item'),
  new TSMKeyword('AuctioningOpMax', 'Returns the maximum price generated by the operations applied to your groups'),
  new TSMKeyword('AuctioningOpMin', 'Returns the minimum price generated by the operations applied to your groups'),
  new TSMKeyword('AuctioningOpNormal', 'Returns the normal price generated by the operations applied to your groups'),
  new TSMKeyword('AvgBuy', 'Returns the average buy price for all purchases for a particular item'),
  new TSMKeyword('AvgSell', 'Returns the average sell price for all sales for a particular item'),
  new TSMKeyword('Crafting', 'Returns the sum of the material prices of each individual item used to craft the recipe'),
  new TSMKeyword('DBHistorical', 'Returns the 60-day average of the DBMarket value for a particular item on your realm\'s Auction House'),
  new TSMKeyword('DBMarket', 'Returns the weighted 14-day average of the auctions listed for a particular item on your realm\'s Auction House'),
  new TSMKeyword('DBMinBuyout', 'Returns the lowest priced auction on your realm\'s Auction House'),
  new TSMKeyword('DBRegionHistorical', 'Returns the 60-day average of DBRegionMarketAvg for a particular item in your region'),
  new TSMKeyword('DBRegionMarketAvg', 'Returns the average of DBMarket across all the realms in your region for a particular item'),
  new TSMKeyword('DBRegionMinBuyoutAvg', 'Returns the average of DBMinBuyout across all the realms in your region for a particular item'),
  new TSMKeyword('DBRegionSaleAvg', 'Returns the average sale and purchase price for a particular item in your region'),
  new TSMKeyword('DBRegionSaleRate', 'Returns a decimal number that indicates the sale rate of a particular item averaged across all Auction Houses in your region'),
  new TSMKeyword('DBRegionSoldPerDay', 'Returns a decimal number indicating the volume of an item that is sold on average per Auction House per day in your region'),
  new TSMKeyword('Destroy', 'Returns the average value of the items you would receive by destroying it'),
  new TSMKeyword('ItemLevel', 'Returns an integer for the item\'s level'),
  new TSMKeyword('ItemQuality', 'Returns an integer for the item\'s quality'),
  new TSMKeyword('MatPrice', 'Returns the material price of a item'),
  new TSMKeyword('MaxBuy', 'Returns the maximum price you\'ve purchased an item for in your accounting data'),
  new TSMKeyword('MaxSell', 'Returns the maximum price you\'ve sold an item for in your accounting data'),
  new TSMKeyword('MinBuy', 'Returns the minimum price you\'ve purchased an item for in your accounting data'),
  new TSMKeyword('MinSell', 'Returns the minimum price you\'ve sold an item for in your accounting data'),
  new TSMKeyword('NumExpires', 'Returns an integer for the number of times an item has expired from the Auction House since the last time it was sold'),
  new TSMKeyword('NumInventory', 'Returns an integer indicating the number of an item you currently possess'),
  new TSMKeyword('RequiredLevel', 'Returns an integer for the item\'s required level'),
  new TSMKeyword('SaleRate', 'Returns a decimal number that shows your personal sale rate for a particular item'),
  new TSMKeyword('ShoppingOpMax', 'Returns the maximum shopping price from the shopping operation applied to your groups'),
  new TSMKeyword('SniperOpMax', 'Returns the maximum sniper price from the sniper operation applied to your groups'),
  new TSMKeyword('VendorBuy', 'Returns the cost of a particular item you can purchase from a vendor'),
  new TSMKeyword('VendorSell', 'Returns the value of a particular item when you sell it to a vendor'),
];

export const functions = [
  new TSMFunction('min', ['n..'], 'Returns the numerical minimum of the prices in the list'),
  new TSMFunction('max', ['n..'], 'Returns the numerical maximum of the prices in the list'),
  new TSMFunction('first', ['n..'], 'Returns the first valid price in the list'),
  new TSMFunction('avg', ['n..'], 'Returns the average of the prices in the list'),
  new TSMFunction('check', ['n', 'b', 'c'], 'If the first parameter is greater than 0 return the second parameter, otherwise return the third parameter'),
  new TSMFunction('convert', ['variable'], 'Returns the lowest cost conversion of the item being evaluated'),
  new TSMFunction('ifgt', ['a', 'b', 'x', 'y'], 'Returns x if a is greater than b, otherwise it returns y'),
  new TSMFunction('ifgte', ['a', 'b', 'x', 'y'], 'Returns x if a is greater than or equal to b, otherwise it returns y'),
  new TSMFunction('iflt', ['a', 'b', 'x', 'y'], 'Returns x if a is less than b, otherwise it returns y'),
  new TSMFunction('iflte', ['a', 'b', 'x', 'y'], 'Returns x if a is less than or equal to b, otherwise it returns y'),
  new TSMFunction('ifeq', ['a', 'b', 'x', 'y'], 'Returns x if a is equal to b, otherwise it returns y'),
  new TSMFunction('round', ['x', 'y'], 'Rounds x to the nearest multiple of y'),
  new TSMFunction('roundup', ['x', 'y'], 'Rounds x up to the nearest multiple of y'),
  new TSMFunction('rounddown', ['x', 'y'], 'Rounds x down to the nearest multiple of y'),
];

export const specialFeatures = [
  new TSMKeyword('[Item Link]', 'Reference an item by link'),
  new TSMKeyword('i:ID', 'Reference an item by ID'),
];

export function findMatches(search) {
  const regex = new RegExp(
    search.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'),
    'ig',
  );

  return {
    functions: functions.filter(f => regex.test(f.name)),
    symbols: symbols.filter(k => regex.test(k.name)),
  };
}
